package tokens

import (
	"crypto/rand"
	"crypto/sha256"
	"encoding/base64"
)

type VerificationTokenType string

const (
	EmailVerificationToken VerificationTokenType = "email_verification"
	PasswordResetToken     VerificationTokenType = "password_reset"
)

// Functions related to Email Verification Tokens

// GenerateEmailVerificationToken generates a new email verification token.
//
// The process works as follows:
// 1. Generate a secure, random 32 byte token.
// 2. Encode the token using base64 URL encoding.
// 3. Hash the token using SHA-256 to create a unique identifier.
// 4. Return the base64 URL encoded token (goes to user), and hash of the token (goes to database, with expiry time of 1hr).
func GenerateEmailVerificationToken() (string, []byte, error) {
	token := make([]byte, 32)
	_, err := rand.Read(token)
	if err != nil {
		return "", nil, err
	}

	// Encode the token to base64 URL format
	encoded := base64.RawURLEncoding.EncodeToString(token)

	// Hash the token using SHA-256
	hash := sha256.Sum256([]byte(encoded))

	return encoded, hash[:], nil
}

// HashEmailVerificationToken hashes the given email verification token using SHA-256.
//
// It returns the hashed token as a byte array.
// The token should be the RAW base64 URL encoded string generated by GenerateEmailVerificationToken.
func HashEmailVerificationToken(token string) []byte {
	hash := sha256.Sum256([]byte(token))
	return hash[:]
}
