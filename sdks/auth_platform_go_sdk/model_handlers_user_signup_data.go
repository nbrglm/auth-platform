/*
NBRGLM Auth Platform

This is the NBRGLM Auth Platform API documentation.

API version: 0.0.1
Contact: contact@nbrglm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth_platform_go_sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the HandlersUserSignupData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlersUserSignupData{}

// HandlersUserSignupData struct for HandlersUserSignupData
type HandlersUserSignupData struct {
	ConfirmPassword string `json:"confirmPassword"`
	Email string `json:"email"`
	FirstName string `json:"firstName"`
	// Optional invite token for signup
	InviteToken *string `json:"inviteToken,omitempty"`
	LastName string `json:"lastName"`
	Password string `json:"password"`
	AdditionalProperties map[string]interface{}
}

type _HandlersUserSignupData HandlersUserSignupData

// NewHandlersUserSignupData instantiates a new HandlersUserSignupData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlersUserSignupData(confirmPassword string, email string, firstName string, lastName string, password string) *HandlersUserSignupData {
	this := HandlersUserSignupData{}
	this.ConfirmPassword = confirmPassword
	this.Email = email
	this.FirstName = firstName
	this.LastName = lastName
	this.Password = password
	return &this
}

// NewHandlersUserSignupDataWithDefaults instantiates a new HandlersUserSignupData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlersUserSignupDataWithDefaults() *HandlersUserSignupData {
	this := HandlersUserSignupData{}
	return &this
}

// GetConfirmPassword returns the ConfirmPassword field value
func (o *HandlersUserSignupData) GetConfirmPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfirmPassword
}

// GetConfirmPasswordOk returns a tuple with the ConfirmPassword field value
// and a boolean to check if the value has been set.
func (o *HandlersUserSignupData) GetConfirmPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfirmPassword, true
}

// SetConfirmPassword sets field value
func (o *HandlersUserSignupData) SetConfirmPassword(v string) {
	o.ConfirmPassword = v
}

// GetEmail returns the Email field value
func (o *HandlersUserSignupData) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *HandlersUserSignupData) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *HandlersUserSignupData) SetEmail(v string) {
	o.Email = v
}

// GetFirstName returns the FirstName field value
func (o *HandlersUserSignupData) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *HandlersUserSignupData) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *HandlersUserSignupData) SetFirstName(v string) {
	o.FirstName = v
}

// GetInviteToken returns the InviteToken field value if set, zero value otherwise.
func (o *HandlersUserSignupData) GetInviteToken() string {
	if o == nil || IsNil(o.InviteToken) {
		var ret string
		return ret
	}
	return *o.InviteToken
}

// GetInviteTokenOk returns a tuple with the InviteToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserSignupData) GetInviteTokenOk() (*string, bool) {
	if o == nil || IsNil(o.InviteToken) {
		return nil, false
	}
	return o.InviteToken, true
}

// HasInviteToken returns a boolean if a field has been set.
func (o *HandlersUserSignupData) HasInviteToken() bool {
	if o != nil && !IsNil(o.InviteToken) {
		return true
	}

	return false
}

// SetInviteToken gets a reference to the given string and assigns it to the InviteToken field.
func (o *HandlersUserSignupData) SetInviteToken(v string) {
	o.InviteToken = &v
}

// GetLastName returns the LastName field value
func (o *HandlersUserSignupData) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *HandlersUserSignupData) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *HandlersUserSignupData) SetLastName(v string) {
	o.LastName = v
}

// GetPassword returns the Password field value
func (o *HandlersUserSignupData) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *HandlersUserSignupData) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *HandlersUserSignupData) SetPassword(v string) {
	o.Password = v
}

func (o HandlersUserSignupData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlersUserSignupData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["confirmPassword"] = o.ConfirmPassword
	toSerialize["email"] = o.Email
	toSerialize["firstName"] = o.FirstName
	if !IsNil(o.InviteToken) {
		toSerialize["inviteToken"] = o.InviteToken
	}
	toSerialize["lastName"] = o.LastName
	toSerialize["password"] = o.Password

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HandlersUserSignupData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"confirmPassword",
		"email",
		"firstName",
		"lastName",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHandlersUserSignupData := _HandlersUserSignupData{}

	err = json.Unmarshal(data, &varHandlersUserSignupData)

	if err != nil {
		return err
	}

	*o = HandlersUserSignupData(varHandlersUserSignupData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "confirmPassword")
		delete(additionalProperties, "email")
		delete(additionalProperties, "firstName")
		delete(additionalProperties, "inviteToken")
		delete(additionalProperties, "lastName")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHandlersUserSignupData struct {
	value *HandlersUserSignupData
	isSet bool
}

func (v NullableHandlersUserSignupData) Get() *HandlersUserSignupData {
	return v.value
}

func (v *NullableHandlersUserSignupData) Set(val *HandlersUserSignupData) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlersUserSignupData) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlersUserSignupData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlersUserSignupData(val *HandlersUserSignupData) *NullableHandlersUserSignupData {
	return &NullableHandlersUserSignupData{value: val, isSet: true}
}

func (v NullableHandlersUserSignupData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlersUserSignupData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


