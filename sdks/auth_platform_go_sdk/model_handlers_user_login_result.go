/*
NBRGLM Auth Platform

This is the NBRGLM Auth Platform API documentation.

API version: 0.0.1
Contact: contact@nbrglm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth_platform_go_sdk

import (
	"encoding/json"
)

// checks if the HandlersUserLoginResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlersUserLoginResult{}

// HandlersUserLoginResult struct for HandlersUserLoginResult
type HandlersUserLoginResult struct {
	FlowId *string `json:"flowId,omitempty"`
	Message *string `json:"message,omitempty"`
	RequireEmailVerification *bool `json:"requireEmailVerification,omitempty"`
	Tokens *TokensTokens `json:"tokens,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HandlersUserLoginResult HandlersUserLoginResult

// NewHandlersUserLoginResult instantiates a new HandlersUserLoginResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlersUserLoginResult() *HandlersUserLoginResult {
	this := HandlersUserLoginResult{}
	return &this
}

// NewHandlersUserLoginResultWithDefaults instantiates a new HandlersUserLoginResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlersUserLoginResultWithDefaults() *HandlersUserLoginResult {
	this := HandlersUserLoginResult{}
	return &this
}

// GetFlowId returns the FlowId field value if set, zero value otherwise.
func (o *HandlersUserLoginResult) GetFlowId() string {
	if o == nil || IsNil(o.FlowId) {
		var ret string
		return ret
	}
	return *o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserLoginResult) GetFlowIdOk() (*string, bool) {
	if o == nil || IsNil(o.FlowId) {
		return nil, false
	}
	return o.FlowId, true
}

// HasFlowId returns a boolean if a field has been set.
func (o *HandlersUserLoginResult) HasFlowId() bool {
	if o != nil && !IsNil(o.FlowId) {
		return true
	}

	return false
}

// SetFlowId gets a reference to the given string and assigns it to the FlowId field.
func (o *HandlersUserLoginResult) SetFlowId(v string) {
	o.FlowId = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *HandlersUserLoginResult) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserLoginResult) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *HandlersUserLoginResult) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *HandlersUserLoginResult) SetMessage(v string) {
	o.Message = &v
}

// GetRequireEmailVerification returns the RequireEmailVerification field value if set, zero value otherwise.
func (o *HandlersUserLoginResult) GetRequireEmailVerification() bool {
	if o == nil || IsNil(o.RequireEmailVerification) {
		var ret bool
		return ret
	}
	return *o.RequireEmailVerification
}

// GetRequireEmailVerificationOk returns a tuple with the RequireEmailVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserLoginResult) GetRequireEmailVerificationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireEmailVerification) {
		return nil, false
	}
	return o.RequireEmailVerification, true
}

// HasRequireEmailVerification returns a boolean if a field has been set.
func (o *HandlersUserLoginResult) HasRequireEmailVerification() bool {
	if o != nil && !IsNil(o.RequireEmailVerification) {
		return true
	}

	return false
}

// SetRequireEmailVerification gets a reference to the given bool and assigns it to the RequireEmailVerification field.
func (o *HandlersUserLoginResult) SetRequireEmailVerification(v bool) {
	o.RequireEmailVerification = &v
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *HandlersUserLoginResult) GetTokens() TokensTokens {
	if o == nil || IsNil(o.Tokens) {
		var ret TokensTokens
		return ret
	}
	return *o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserLoginResult) GetTokensOk() (*TokensTokens, bool) {
	if o == nil || IsNil(o.Tokens) {
		return nil, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *HandlersUserLoginResult) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given TokensTokens and assigns it to the Tokens field.
func (o *HandlersUserLoginResult) SetTokens(v TokensTokens) {
	o.Tokens = &v
}

func (o HandlersUserLoginResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlersUserLoginResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FlowId) {
		toSerialize["flowId"] = o.FlowId
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.RequireEmailVerification) {
		toSerialize["requireEmailVerification"] = o.RequireEmailVerification
	}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HandlersUserLoginResult) UnmarshalJSON(data []byte) (err error) {
	varHandlersUserLoginResult := _HandlersUserLoginResult{}

	err = json.Unmarshal(data, &varHandlersUserLoginResult)

	if err != nil {
		return err
	}

	*o = HandlersUserLoginResult(varHandlersUserLoginResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "flowId")
		delete(additionalProperties, "message")
		delete(additionalProperties, "requireEmailVerification")
		delete(additionalProperties, "tokens")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHandlersUserLoginResult struct {
	value *HandlersUserLoginResult
	isSet bool
}

func (v NullableHandlersUserLoginResult) Get() *HandlersUserLoginResult {
	return v.value
}

func (v *NullableHandlersUserLoginResult) Set(val *HandlersUserLoginResult) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlersUserLoginResult) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlersUserLoginResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlersUserLoginResult(val *HandlersUserLoginResult) *NullableHandlersUserLoginResult {
	return &NullableHandlersUserLoginResult{value: val, isSet: true}
}

func (v NullableHandlersUserLoginResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlersUserLoginResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


