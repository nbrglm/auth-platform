/*
NBRGLM Auth Platform

This is the NBRGLM Auth Platform API documentation.

API version: 0.0.1
Contact: contact@nbrglm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth_platform_go_sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the HandlersUserLoginData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlersUserLoginData{}

// HandlersUserLoginData struct for HandlersUserLoginData
type HandlersUserLoginData struct {
	Email string `json:"email"`
	// Optional field to store in the flow data which can be fetched by the client after login This can be used to redirect the user to a specific page after login or to maintain the state of the application. It is recommended to validate this field on the client side to prevent open redirect vulnerabilities.
	FlowReturnTo *string `json:"flowReturnTo,omitempty"`
	Password string `json:"password"`
	AdditionalProperties map[string]interface{}
}

type _HandlersUserLoginData HandlersUserLoginData

// NewHandlersUserLoginData instantiates a new HandlersUserLoginData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlersUserLoginData(email string, password string) *HandlersUserLoginData {
	this := HandlersUserLoginData{}
	this.Email = email
	this.Password = password
	return &this
}

// NewHandlersUserLoginDataWithDefaults instantiates a new HandlersUserLoginData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlersUserLoginDataWithDefaults() *HandlersUserLoginData {
	this := HandlersUserLoginData{}
	return &this
}

// GetEmail returns the Email field value
func (o *HandlersUserLoginData) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *HandlersUserLoginData) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *HandlersUserLoginData) SetEmail(v string) {
	o.Email = v
}

// GetFlowReturnTo returns the FlowReturnTo field value if set, zero value otherwise.
func (o *HandlersUserLoginData) GetFlowReturnTo() string {
	if o == nil || IsNil(o.FlowReturnTo) {
		var ret string
		return ret
	}
	return *o.FlowReturnTo
}

// GetFlowReturnToOk returns a tuple with the FlowReturnTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserLoginData) GetFlowReturnToOk() (*string, bool) {
	if o == nil || IsNil(o.FlowReturnTo) {
		return nil, false
	}
	return o.FlowReturnTo, true
}

// HasFlowReturnTo returns a boolean if a field has been set.
func (o *HandlersUserLoginData) HasFlowReturnTo() bool {
	if o != nil && !IsNil(o.FlowReturnTo) {
		return true
	}

	return false
}

// SetFlowReturnTo gets a reference to the given string and assigns it to the FlowReturnTo field.
func (o *HandlersUserLoginData) SetFlowReturnTo(v string) {
	o.FlowReturnTo = &v
}

// GetPassword returns the Password field value
func (o *HandlersUserLoginData) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *HandlersUserLoginData) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *HandlersUserLoginData) SetPassword(v string) {
	o.Password = v
}

func (o HandlersUserLoginData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlersUserLoginData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	if !IsNil(o.FlowReturnTo) {
		toSerialize["flowReturnTo"] = o.FlowReturnTo
	}
	toSerialize["password"] = o.Password

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HandlersUserLoginData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHandlersUserLoginData := _HandlersUserLoginData{}

	err = json.Unmarshal(data, &varHandlersUserLoginData)

	if err != nil {
		return err
	}

	*o = HandlersUserLoginData(varHandlersUserLoginData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "flowReturnTo")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHandlersUserLoginData struct {
	value *HandlersUserLoginData
	isSet bool
}

func (v NullableHandlersUserLoginData) Get() *HandlersUserLoginData {
	return v.value
}

func (v *NullableHandlersUserLoginData) Set(val *HandlersUserLoginData) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlersUserLoginData) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlersUserLoginData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlersUserLoginData(val *HandlersUserLoginData) *NullableHandlersUserLoginData {
	return &NullableHandlersUserLoginData{value: val, isSet: true}
}

func (v NullableHandlersUserLoginData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlersUserLoginData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


