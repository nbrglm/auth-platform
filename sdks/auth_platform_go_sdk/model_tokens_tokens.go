/*
NBRGLM Auth Platform

This is the NBRGLM Auth Platform API documentation.

API version: 0.0.1
Contact: contact@nbrglm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth_platform_go_sdk

import (
	"encoding/json"
)

// checks if the TokensTokens type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokensTokens{}

// TokensTokens struct for TokensTokens
type TokensTokens struct {
	// RefreshToken is the generated refresh token.  This is base64.RawURLEncoding encoded. DO NOT DECODE IT WHILE RETRIEVING IT FROM THE COOKIES/CLIENT.
	RefreshToken *string `json:"refresh_token,omitempty"`
	// RefreshTokenExpiry is the expiration time of the refresh token.
	RefreshTokenExpiry *string `json:"refresh_token_expiry,omitempty"`
	// SessionId is the unique identifier for the session.
	SessionId *string `json:"session_id,omitempty"`
	// SessionToken is the generated session token.  This is a jwt which is base64.RawURLEncoding encoded. YOU NEED TO DECODE IT WHILE RETRIEVING IT FROM THE COOKIES/CLIENT. DO NOT USE IT AS IS. VALIDATION WILL FAIL WITHOUT DECODING. ONLY WHEN DECODED, YOU SHOULD PASS IT TO THE THINGS THAT REQUIRE THE SESSION TOKEN.
	SessionToken *string `json:"session_token,omitempty"`
	// SessionTokenExpiry is the expiration time of the session token.
	SessionTokenExpiry *string `json:"session_token_expiry,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TokensTokens TokensTokens

// NewTokensTokens instantiates a new TokensTokens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokensTokens() *TokensTokens {
	this := TokensTokens{}
	return &this
}

// NewTokensTokensWithDefaults instantiates a new TokensTokens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokensTokensWithDefaults() *TokensTokens {
	this := TokensTokens{}
	return &this
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *TokensTokens) GetRefreshToken() string {
	if o == nil || IsNil(o.RefreshToken) {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokensTokens) GetRefreshTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshToken) {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *TokensTokens) HasRefreshToken() bool {
	if o != nil && !IsNil(o.RefreshToken) {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *TokensTokens) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetRefreshTokenExpiry returns the RefreshTokenExpiry field value if set, zero value otherwise.
func (o *TokensTokens) GetRefreshTokenExpiry() string {
	if o == nil || IsNil(o.RefreshTokenExpiry) {
		var ret string
		return ret
	}
	return *o.RefreshTokenExpiry
}

// GetRefreshTokenExpiryOk returns a tuple with the RefreshTokenExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokensTokens) GetRefreshTokenExpiryOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshTokenExpiry) {
		return nil, false
	}
	return o.RefreshTokenExpiry, true
}

// HasRefreshTokenExpiry returns a boolean if a field has been set.
func (o *TokensTokens) HasRefreshTokenExpiry() bool {
	if o != nil && !IsNil(o.RefreshTokenExpiry) {
		return true
	}

	return false
}

// SetRefreshTokenExpiry gets a reference to the given string and assigns it to the RefreshTokenExpiry field.
func (o *TokensTokens) SetRefreshTokenExpiry(v string) {
	o.RefreshTokenExpiry = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *TokensTokens) GetSessionId() string {
	if o == nil || IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokensTokens) GetSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *TokensTokens) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *TokensTokens) SetSessionId(v string) {
	o.SessionId = &v
}

// GetSessionToken returns the SessionToken field value if set, zero value otherwise.
func (o *TokensTokens) GetSessionToken() string {
	if o == nil || IsNil(o.SessionToken) {
		var ret string
		return ret
	}
	return *o.SessionToken
}

// GetSessionTokenOk returns a tuple with the SessionToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokensTokens) GetSessionTokenOk() (*string, bool) {
	if o == nil || IsNil(o.SessionToken) {
		return nil, false
	}
	return o.SessionToken, true
}

// HasSessionToken returns a boolean if a field has been set.
func (o *TokensTokens) HasSessionToken() bool {
	if o != nil && !IsNil(o.SessionToken) {
		return true
	}

	return false
}

// SetSessionToken gets a reference to the given string and assigns it to the SessionToken field.
func (o *TokensTokens) SetSessionToken(v string) {
	o.SessionToken = &v
}

// GetSessionTokenExpiry returns the SessionTokenExpiry field value if set, zero value otherwise.
func (o *TokensTokens) GetSessionTokenExpiry() string {
	if o == nil || IsNil(o.SessionTokenExpiry) {
		var ret string
		return ret
	}
	return *o.SessionTokenExpiry
}

// GetSessionTokenExpiryOk returns a tuple with the SessionTokenExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokensTokens) GetSessionTokenExpiryOk() (*string, bool) {
	if o == nil || IsNil(o.SessionTokenExpiry) {
		return nil, false
	}
	return o.SessionTokenExpiry, true
}

// HasSessionTokenExpiry returns a boolean if a field has been set.
func (o *TokensTokens) HasSessionTokenExpiry() bool {
	if o != nil && !IsNil(o.SessionTokenExpiry) {
		return true
	}

	return false
}

// SetSessionTokenExpiry gets a reference to the given string and assigns it to the SessionTokenExpiry field.
func (o *TokensTokens) SetSessionTokenExpiry(v string) {
	o.SessionTokenExpiry = &v
}

func (o TokensTokens) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokensTokens) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RefreshToken) {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	if !IsNil(o.RefreshTokenExpiry) {
		toSerialize["refresh_token_expiry"] = o.RefreshTokenExpiry
	}
	if !IsNil(o.SessionId) {
		toSerialize["session_id"] = o.SessionId
	}
	if !IsNil(o.SessionToken) {
		toSerialize["session_token"] = o.SessionToken
	}
	if !IsNil(o.SessionTokenExpiry) {
		toSerialize["session_token_expiry"] = o.SessionTokenExpiry
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokensTokens) UnmarshalJSON(data []byte) (err error) {
	varTokensTokens := _TokensTokens{}

	err = json.Unmarshal(data, &varTokensTokens)

	if err != nil {
		return err
	}

	*o = TokensTokens(varTokensTokens)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "refresh_token")
		delete(additionalProperties, "refresh_token_expiry")
		delete(additionalProperties, "session_id")
		delete(additionalProperties, "session_token")
		delete(additionalProperties, "session_token_expiry")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokensTokens struct {
	value *TokensTokens
	isSet bool
}

func (v NullableTokensTokens) Get() *TokensTokens {
	return v.value
}

func (v *NullableTokensTokens) Set(val *TokensTokens) {
	v.value = val
	v.isSet = true
}

func (v NullableTokensTokens) IsSet() bool {
	return v.isSet
}

func (v *NullableTokensTokens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokensTokens(val *TokensTokens) *NullableTokensTokens {
	return &NullableTokensTokens{value: val, isSet: true}
}

func (v NullableTokensTokens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokensTokens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


