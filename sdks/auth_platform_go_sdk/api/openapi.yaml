openapi: 3.0.1
info:
  contact:
    email: contact@nbrglm.com
    name: NBRGLM Support
    url: https://nbrglm.com/support
  description: This is the NBRGLM Auth Platform API documentation.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://nbrglm.com/auth-platform/terms
  title: NBRGLM Auth Platform
  version: 0.0.1
externalDocs:
  description: NBRGLM Auth Platform Documentation
  url: https://nbrglm.com/auth-platform/docs
servers:
- url: //localhost:3360/
paths:
  /api/auth/flow/{flowId}:
    get:
      description: Retrieves user flow data based on the provided flow ID.
      parameters:
      - description: Flow ID
        in: path
        name: flowId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.UserFlowData"
          description: User Flow Data
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Internal Server Error
      summary: Get User Flow Data
      tags:
      - Auth
  /api/auth/login:
    post:
      description: Handles user login requests.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/handlers.UserLoginData"
        description: User Login Data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.UserLoginResult"
          description: User Login Result
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.UserLoginResult"
          description: Forbidden - Email Not Verified OR User does not belong to any
            organization
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Internal Server Error
      summary: User Login
      tags:
      - Auth
      x-codegen-request-body-name: data
  /api/auth/logout:
    post:
      description: Logs out the user by revoking their session using session token
        or refresh token. Requires atleast one of the tokens.
      parameters:
      - description: Session token
        in: header
        name: X-NAP-Session-Token
        schema:
          type: string
      - description: Refresh token
        in: header
        name: X-NAP-Refresh-Token
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.LogoutResult"
          description: Logout result
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Bad Request - Invalid or missing tokens
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Unauthorized - Invalid or expired tokens
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Internal server error
      summary: Logout user
      tags:
      - Auth
  /api/auth/refresh:
    post:
      description: Handles token refresh requests.
      parameters:
      - description: Refresh token
        in: header
        name: X-NAP-Refresh-Token
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.RefreshTokenResult"
          description: New tokens
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Bad Request - Invalid or missing tokens
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Unauthorized - Invalid or expired tokens - Proceed to Login
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Internal server error
      summary: Refresh Token
      tags:
      - Auth
  /api/auth/signup:
    post:
      description: Handles user registration requests.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/handlers.UserSignupData"
        description: User Signup Data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.UserSignupResult"
          description: User Signup Result
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Unauthorized - Invalid Invite Token or Missing Invite Token
            or Domain Not Allowed
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Internal Server Error
      summary: User Signup
      tags:
      - Auth
      x-codegen-request-body-name: data
  /api/auth/verify-email/send:
    post:
      description: Sends a verification email to the user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/handlers.SendVerificationEmailData"
        description: Send Verification Email Data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.SendVerificationEmailResult"
          description: Send Verification Email Result
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Bad Request - Invalid Input or User does not exist
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Internal Server Error
      summary: Send Verification Email
      tags:
      - Auth
      x-codegen-request-body-name: data
  /api/auth/verify-email/verify:
    post:
      description: Verifies the email using the provided token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/handlers.VerifyEmailTokenData"
        description: Verify Email Token Data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.VerifyEmailTokenResult"
          description: Verify Email Token Result
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Bad Request - Invalid Input or Token
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.ErrorResponse"
          description: Internal Server Error
      summary: Verify Email Token
      tags:
      - Auth
      x-codegen-request-body-name: data
components:
  schemas:
    handlers.LogoutResult:
      example:
        success: true
        message: message
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    handlers.RefreshTokenResult:
      example:
        tokens:
          session_token: session_token
          refresh_token: refresh_token
          refresh_token_expiry: refresh_token_expiry
          session_id: session_id
          session_token_expiry: session_token_expiry
      properties:
        tokens:
          $ref: "#/components/schemas/tokens.Tokens"
      type: object
    handlers.SendVerificationEmailData:
      properties:
        email:
          type: string
      required:
      - email
      type: object
    handlers.SendVerificationEmailResult:
      example:
        success: true
        message: message
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    handlers.UserFlowData:
      example:
        ssoProvider: ssoProvider
        type: type
        userId: userId
        expiresAt: expiresAt
        createdAt: createdAt
        inviteToken: inviteToken
        returnTo: returnTo
        id: id
        mfaRequired: true
        mfaVerified: true
        orgs:
        - createdAt: createdAt
          settings:
            key: "{}"
          deletedAt: deletedAt
          avatarURL: avatarURL
          name: name
          description: description
          id: id
          slug: slug
          updatedAt: updatedAt
        - createdAt: createdAt
          settings:
            key: "{}"
          deletedAt: deletedAt
          avatarURL: avatarURL
          name: name
          description: description
          id: id
          slug: slug
          updatedAt: updatedAt
        ssoUserId: ssoUserId
        email: email
      properties:
        createdAt:
          type: string
        email:
          type: string
        expiresAt:
          type: string
        id:
          type: string
        inviteToken:
          description: For Invite Flow
          type: string
        mfaRequired:
          type: boolean
        mfaVerified:
          type: boolean
        orgs:
          items:
            $ref: "#/components/schemas/models.OrgCompat"
          type: array
        returnTo:
          description: URL to redirect after flow completion
          type: string
        ssoProvider:
          description: "For SSO Flow, e.g., \"google\", \"github\", etc."
          type: string
        ssoUserId:
          description: "For SSO Flow, External User ID"
          type: string
        type:
          type: string
        userId:
          type: string
      type: object
    handlers.UserLoginData:
      properties:
        email:
          type: string
        flowReturnTo:
          description: |-
            Optional field to store in the flow data which can be fetched by the client after login
            This can be used to redirect the user to a specific page after login
            or to maintain the state of the application.
            It is recommended to validate this field on the client side to prevent open redirect vulnerabilities.
          type: string
        password:
          type: string
      required:
      - email
      - password
      type: object
    handlers.UserLoginResult:
      example:
        requireEmailVerification: true
        tokens:
          session_token: session_token
          refresh_token: refresh_token
          refresh_token_expiry: refresh_token_expiry
          session_id: session_id
          session_token_expiry: session_token_expiry
        message: message
        flowId: flowId
      properties:
        flowId:
          type: string
        message:
          type: string
        requireEmailVerification:
          type: boolean
        tokens:
          $ref: "#/components/schemas/tokens.Tokens"
      type: object
    handlers.UserSignupData:
      properties:
        confirmPassword:
          type: string
        email:
          type: string
        firstName:
          type: string
        inviteToken:
          description: Optional invite token for signup
          type: string
        lastName:
          type: string
        password:
          maxLength: 32
          minLength: 8
          type: string
      required:
      - confirmPassword
      - email
      - firstName
      - lastName
      - password
      type: object
    handlers.UserSignupResult:
      example:
        message: message
        userId: userId
      properties:
        message:
          type: string
        userId:
          type: string
      type: object
    handlers.VerifyEmailTokenData:
      properties:
        token:
          type: string
      required:
      - token
      type: object
    handlers.VerifyEmailTokenResult:
      example:
        success: true
        message: message
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    models.ErrorResponse:
      example:
        code: 0
        debug: debug
        message: message
      properties:
        code:
          description: Code is an error code that can be used for programmatic handling
            of errors.
          type: integer
        debug:
          description: DebugMessage is a technical message that can be used for debugging.
          type: string
        message:
          description: Message is a user-friendly message that can be displayed to
            the end user.
          type: string
      type: object
    models.OrgCompat:
      example:
        createdAt: createdAt
        settings:
          key: "{}"
        deletedAt: deletedAt
        avatarURL: avatarURL
        name: name
        description: description
        id: id
        slug: slug
        updatedAt: updatedAt
      properties:
        avatarURL:
          type: string
        createdAt:
          type: string
        deletedAt:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        settings:
          additionalProperties:
            type: object
          type: object
        slug:
          type: string
        updatedAt:
          type: string
      type: object
    tokens.Tokens:
      example:
        session_token: session_token
        refresh_token: refresh_token
        refresh_token_expiry: refresh_token_expiry
        session_id: session_id
        session_token_expiry: session_token_expiry
      properties:
        refresh_token:
          description: |-
            RefreshToken is the generated refresh token.

            This is base64.RawURLEncoding encoded.
            DO NOT DECODE IT WHILE RETRIEVING IT FROM THE COOKIES/CLIENT.
          type: string
        refresh_token_expiry:
          description: RefreshTokenExpiry is the expiration time of the refresh token.
          type: string
        session_id:
          description: SessionId is the unique identifier for the session.
          type: string
        session_token:
          description: |-
            SessionToken is the generated session token.

            This is a jwt which is base64.RawURLEncoding encoded.
            YOU NEED TO DECODE IT WHILE RETRIEVING IT FROM THE COOKIES/CLIENT.
            DO NOT USE IT AS IS. VALIDATION WILL FAIL WITHOUT DECODING.
            ONLY WHEN DECODED, YOU SHOULD PASS IT TO THE THINGS THAT REQUIRE THE SESSION TOKEN.
          type: string
        session_token_expiry:
          description: SessionTokenExpiry is the expiration time of the session token.
          type: string
      type: object
  securitySchemes:
    APIKeyAuth:
      in: header
      name: X-NAP-API-Key
      type: apiKey
    RefreshHeaderAuth:
      in: header
      name: X-NAP-Refresh-Token
      type: apiKey
    SessionHeaderAuth:
      in: header
      name: X-NAP-Session-Token
      type: apiKey
x-original-swagger-version: "2.0"
