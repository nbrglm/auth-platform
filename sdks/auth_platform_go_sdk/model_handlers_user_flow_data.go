/*
NBRGLM Auth Platform

This is the NBRGLM Auth Platform API documentation.

API version: 0.0.1
Contact: contact@nbrglm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth_platform_go_sdk

import (
	"encoding/json"
)

// checks if the HandlersUserFlowData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlersUserFlowData{}

// HandlersUserFlowData struct for HandlersUserFlowData
type HandlersUserFlowData struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	Email *string `json:"email,omitempty"`
	ExpiresAt *string `json:"expiresAt,omitempty"`
	Id *string `json:"id,omitempty"`
	// For Invite Flow
	InviteToken *string `json:"inviteToken,omitempty"`
	MfaRequired *bool `json:"mfaRequired,omitempty"`
	MfaVerified *bool `json:"mfaVerified,omitempty"`
	Orgs []ModelsOrgCompat `json:"orgs,omitempty"`
	// URL to redirect after flow completion
	ReturnTo *string `json:"returnTo,omitempty"`
	// For SSO Flow, e.g., \"google\", \"github\", etc.
	SsoProvider *string `json:"ssoProvider,omitempty"`
	// For SSO Flow, External User ID
	SsoUserId *string `json:"ssoUserId,omitempty"`
	Type *string `json:"type,omitempty"`
	UserId *string `json:"userId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HandlersUserFlowData HandlersUserFlowData

// NewHandlersUserFlowData instantiates a new HandlersUserFlowData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlersUserFlowData() *HandlersUserFlowData {
	this := HandlersUserFlowData{}
	return &this
}

// NewHandlersUserFlowDataWithDefaults instantiates a new HandlersUserFlowData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlersUserFlowDataWithDefaults() *HandlersUserFlowData {
	this := HandlersUserFlowData{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *HandlersUserFlowData) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *HandlersUserFlowData) SetEmail(v string) {
	o.Email = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *HandlersUserFlowData) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HandlersUserFlowData) SetId(v string) {
	o.Id = &v
}

// GetInviteToken returns the InviteToken field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetInviteToken() string {
	if o == nil || IsNil(o.InviteToken) {
		var ret string
		return ret
	}
	return *o.InviteToken
}

// GetInviteTokenOk returns a tuple with the InviteToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetInviteTokenOk() (*string, bool) {
	if o == nil || IsNil(o.InviteToken) {
		return nil, false
	}
	return o.InviteToken, true
}

// HasInviteToken returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasInviteToken() bool {
	if o != nil && !IsNil(o.InviteToken) {
		return true
	}

	return false
}

// SetInviteToken gets a reference to the given string and assigns it to the InviteToken field.
func (o *HandlersUserFlowData) SetInviteToken(v string) {
	o.InviteToken = &v
}

// GetMfaRequired returns the MfaRequired field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetMfaRequired() bool {
	if o == nil || IsNil(o.MfaRequired) {
		var ret bool
		return ret
	}
	return *o.MfaRequired
}

// GetMfaRequiredOk returns a tuple with the MfaRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetMfaRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.MfaRequired) {
		return nil, false
	}
	return o.MfaRequired, true
}

// HasMfaRequired returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasMfaRequired() bool {
	if o != nil && !IsNil(o.MfaRequired) {
		return true
	}

	return false
}

// SetMfaRequired gets a reference to the given bool and assigns it to the MfaRequired field.
func (o *HandlersUserFlowData) SetMfaRequired(v bool) {
	o.MfaRequired = &v
}

// GetMfaVerified returns the MfaVerified field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetMfaVerified() bool {
	if o == nil || IsNil(o.MfaVerified) {
		var ret bool
		return ret
	}
	return *o.MfaVerified
}

// GetMfaVerifiedOk returns a tuple with the MfaVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetMfaVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.MfaVerified) {
		return nil, false
	}
	return o.MfaVerified, true
}

// HasMfaVerified returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasMfaVerified() bool {
	if o != nil && !IsNil(o.MfaVerified) {
		return true
	}

	return false
}

// SetMfaVerified gets a reference to the given bool and assigns it to the MfaVerified field.
func (o *HandlersUserFlowData) SetMfaVerified(v bool) {
	o.MfaVerified = &v
}

// GetOrgs returns the Orgs field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetOrgs() []ModelsOrgCompat {
	if o == nil || IsNil(o.Orgs) {
		var ret []ModelsOrgCompat
		return ret
	}
	return o.Orgs
}

// GetOrgsOk returns a tuple with the Orgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetOrgsOk() ([]ModelsOrgCompat, bool) {
	if o == nil || IsNil(o.Orgs) {
		return nil, false
	}
	return o.Orgs, true
}

// HasOrgs returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasOrgs() bool {
	if o != nil && !IsNil(o.Orgs) {
		return true
	}

	return false
}

// SetOrgs gets a reference to the given []ModelsOrgCompat and assigns it to the Orgs field.
func (o *HandlersUserFlowData) SetOrgs(v []ModelsOrgCompat) {
	o.Orgs = v
}

// GetReturnTo returns the ReturnTo field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetReturnTo() string {
	if o == nil || IsNil(o.ReturnTo) {
		var ret string
		return ret
	}
	return *o.ReturnTo
}

// GetReturnToOk returns a tuple with the ReturnTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetReturnToOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnTo) {
		return nil, false
	}
	return o.ReturnTo, true
}

// HasReturnTo returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasReturnTo() bool {
	if o != nil && !IsNil(o.ReturnTo) {
		return true
	}

	return false
}

// SetReturnTo gets a reference to the given string and assigns it to the ReturnTo field.
func (o *HandlersUserFlowData) SetReturnTo(v string) {
	o.ReturnTo = &v
}

// GetSsoProvider returns the SsoProvider field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetSsoProvider() string {
	if o == nil || IsNil(o.SsoProvider) {
		var ret string
		return ret
	}
	return *o.SsoProvider
}

// GetSsoProviderOk returns a tuple with the SsoProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetSsoProviderOk() (*string, bool) {
	if o == nil || IsNil(o.SsoProvider) {
		return nil, false
	}
	return o.SsoProvider, true
}

// HasSsoProvider returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasSsoProvider() bool {
	if o != nil && !IsNil(o.SsoProvider) {
		return true
	}

	return false
}

// SetSsoProvider gets a reference to the given string and assigns it to the SsoProvider field.
func (o *HandlersUserFlowData) SetSsoProvider(v string) {
	o.SsoProvider = &v
}

// GetSsoUserId returns the SsoUserId field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetSsoUserId() string {
	if o == nil || IsNil(o.SsoUserId) {
		var ret string
		return ret
	}
	return *o.SsoUserId
}

// GetSsoUserIdOk returns a tuple with the SsoUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetSsoUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.SsoUserId) {
		return nil, false
	}
	return o.SsoUserId, true
}

// HasSsoUserId returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasSsoUserId() bool {
	if o != nil && !IsNil(o.SsoUserId) {
		return true
	}

	return false
}

// SetSsoUserId gets a reference to the given string and assigns it to the SsoUserId field.
func (o *HandlersUserFlowData) SetSsoUserId(v string) {
	o.SsoUserId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HandlersUserFlowData) SetType(v string) {
	o.Type = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *HandlersUserFlowData) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersUserFlowData) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *HandlersUserFlowData) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *HandlersUserFlowData) SetUserId(v string) {
	o.UserId = &v
}

func (o HandlersUserFlowData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlersUserFlowData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InviteToken) {
		toSerialize["inviteToken"] = o.InviteToken
	}
	if !IsNil(o.MfaRequired) {
		toSerialize["mfaRequired"] = o.MfaRequired
	}
	if !IsNil(o.MfaVerified) {
		toSerialize["mfaVerified"] = o.MfaVerified
	}
	if !IsNil(o.Orgs) {
		toSerialize["orgs"] = o.Orgs
	}
	if !IsNil(o.ReturnTo) {
		toSerialize["returnTo"] = o.ReturnTo
	}
	if !IsNil(o.SsoProvider) {
		toSerialize["ssoProvider"] = o.SsoProvider
	}
	if !IsNil(o.SsoUserId) {
		toSerialize["ssoUserId"] = o.SsoUserId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HandlersUserFlowData) UnmarshalJSON(data []byte) (err error) {
	varHandlersUserFlowData := _HandlersUserFlowData{}

	err = json.Unmarshal(data, &varHandlersUserFlowData)

	if err != nil {
		return err
	}

	*o = HandlersUserFlowData(varHandlersUserFlowData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "email")
		delete(additionalProperties, "expiresAt")
		delete(additionalProperties, "id")
		delete(additionalProperties, "inviteToken")
		delete(additionalProperties, "mfaRequired")
		delete(additionalProperties, "mfaVerified")
		delete(additionalProperties, "orgs")
		delete(additionalProperties, "returnTo")
		delete(additionalProperties, "ssoProvider")
		delete(additionalProperties, "ssoUserId")
		delete(additionalProperties, "type")
		delete(additionalProperties, "userId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHandlersUserFlowData struct {
	value *HandlersUserFlowData
	isSet bool
}

func (v NullableHandlersUserFlowData) Get() *HandlersUserFlowData {
	return v.value
}

func (v *NullableHandlersUserFlowData) Set(val *HandlersUserFlowData) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlersUserFlowData) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlersUserFlowData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlersUserFlowData(val *HandlersUserFlowData) *NullableHandlersUserFlowData {
	return &NullableHandlersUserFlowData{value: val, isSet: true}
}

func (v NullableHandlersUserFlowData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlersUserFlowData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


