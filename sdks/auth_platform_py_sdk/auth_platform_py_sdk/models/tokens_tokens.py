# coding: utf-8

"""
    NBRGLM Auth Platform

    This is the NBRGLM Auth Platform API documentation.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@nbrglm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TokensTokens(BaseModel):
    """
    TokensTokens
    """ # noqa: E501
    refresh_token: Optional[StrictStr] = Field(default=None, description="RefreshToken is the generated refresh token.  This is base64.RawURLEncoding encoded. DO NOT DECODE IT WHILE RETRIEVING IT FROM THE COOKIES/CLIENT.")
    refresh_token_expiry: Optional[StrictStr] = Field(default=None, description="RefreshTokenExpiry is the expiration time of the refresh token.")
    session_id: Optional[StrictStr] = Field(default=None, description="SessionId is the unique identifier for the session.")
    session_token: Optional[StrictStr] = Field(default=None, description="SessionToken is the generated session token.  This is a jwt which is base64.RawURLEncoding encoded. YOU NEED TO DECODE IT WHILE RETRIEVING IT FROM THE COOKIES/CLIENT. DO NOT USE IT AS IS. VALIDATION WILL FAIL WITHOUT DECODING. ONLY WHEN DECODED, YOU SHOULD PASS IT TO THE THINGS THAT REQUIRE THE SESSION TOKEN.")
    session_token_expiry: Optional[StrictStr] = Field(default=None, description="SessionTokenExpiry is the expiration time of the session token.")
    __properties: ClassVar[List[str]] = ["refresh_token", "refresh_token_expiry", "session_id", "session_token", "session_token_expiry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokensTokens from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokensTokens from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "refresh_token": obj.get("refresh_token"),
            "refresh_token_expiry": obj.get("refresh_token_expiry"),
            "session_id": obj.get("session_id"),
            "session_token": obj.get("session_token"),
            "session_token_expiry": obj.get("session_token_expiry")
        })
        return _obj


