# coding: utf-8

"""
    NBRGLM Auth Platform

    This is the NBRGLM Auth Platform API documentation.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@nbrglm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from auth_platform_py_sdk.models.models_org_compat import ModelsOrgCompat
from typing import Optional, Set
from typing_extensions import Self

class HandlersUserFlowData(BaseModel):
    """
    HandlersUserFlowData
    """ # noqa: E501
    created_at: Optional[StrictStr] = Field(default=None, alias="createdAt")
    email: Optional[StrictStr] = None
    expires_at: Optional[StrictStr] = Field(default=None, alias="expiresAt")
    id: Optional[StrictStr] = None
    invite_token: Optional[StrictStr] = Field(default=None, description="For Invite Flow", alias="inviteToken")
    mfa_required: Optional[StrictBool] = Field(default=None, alias="mfaRequired")
    mfa_verified: Optional[StrictBool] = Field(default=None, alias="mfaVerified")
    orgs: Optional[List[ModelsOrgCompat]] = None
    return_to: Optional[StrictStr] = Field(default=None, description="URL to redirect after flow completion", alias="returnTo")
    sso_provider: Optional[StrictStr] = Field(default=None, description="For SSO Flow, e.g., \"google\", \"github\", etc.", alias="ssoProvider")
    sso_user_id: Optional[StrictStr] = Field(default=None, description="For SSO Flow, External User ID", alias="ssoUserId")
    type: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    __properties: ClassVar[List[str]] = ["createdAt", "email", "expiresAt", "id", "inviteToken", "mfaRequired", "mfaVerified", "orgs", "returnTo", "ssoProvider", "ssoUserId", "type", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HandlersUserFlowData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in orgs (list)
        _items = []
        if self.orgs:
            for _item_orgs in self.orgs:
                if _item_orgs:
                    _items.append(_item_orgs.to_dict())
            _dict['orgs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HandlersUserFlowData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "email": obj.get("email"),
            "expiresAt": obj.get("expiresAt"),
            "id": obj.get("id"),
            "inviteToken": obj.get("inviteToken"),
            "mfaRequired": obj.get("mfaRequired"),
            "mfaVerified": obj.get("mfaVerified"),
            "orgs": [ModelsOrgCompat.from_dict(_item) for _item in obj["orgs"]] if obj.get("orgs") is not None else None,
            "returnTo": obj.get("returnTo"),
            "ssoProvider": obj.get("ssoProvider"),
            "ssoUserId": obj.get("ssoUserId"),
            "type": obj.get("type"),
            "userId": obj.get("userId")
        })
        return _obj


