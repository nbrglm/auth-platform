{
    "swagger": "2.0",
    "info": {
        "description": "This is the NBRGLM Nexeres API Spec documentation.",
        "title": "NBRGLM Nexeres API Spec",
        "termsOfService": "https://nbrglm.com/nexeres/terms",
        "contact": {
            "name": "NBRGLM Support",
            "url": "https://nbrglm.com/support",
            "email": "contact@nbrglm.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "0.0.1"
    },
    "host": "localhost:3360",
    "basePath": "/",
    "paths": {
        "/api/admin/config": {
            "get": {
                "description": "Retrieves the current configuration of the application.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get current configuration",
                "responses": {
                    "200": {
                        "description": "Current configuration",
                        "schema": {
                            "$ref": "#/definitions/config.CompleteConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/admin/login": {
            "post": {
                "description": "Sends a login code to the admin's email if it exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Admin login data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin_handlers.AdminLoginData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin Login Result",
                        "schema": {
                            "$ref": "#/definitions/admin_handlers.AdminLoginResult"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/admin/login/verify": {
            "post": {
                "description": "Verifies the admin login using the code sent to email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Verify admin login",
                "parameters": [
                    {
                        "description": "Verify admin login data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin_handlers.VerifyAdminLoginData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verify Admin Login Result",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/flow/{flowId}": {
            "get": {
                "description": "Retrieves user flow data based on the provided flow ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get User Flow Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Flow ID",
                        "name": "flowId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Flow Data",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserFlowData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Handles user login requests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User Login Data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserLoginData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Login Result",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserLoginResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid Credentials or User does not belong to any organization",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "description": "Logs out the user by revoking their session using session token or refresh token. Requires atleast one of the tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "X-NEXERES-Session-Token",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Refresh token",
                        "name": "X-NEXERES-Refresh-Token",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout result",
                        "schema": {
                            "$ref": "#/definitions/handlers.LogoutResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid or missing tokens",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired tokens",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/refresh": {
            "post": {
                "description": "Handles token refresh requests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh token",
                        "name": "X-NEXERES-Refresh-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New tokens",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshTokenResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid or missing tokens",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired tokens - Proceed to Login",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/signup": {
            "post": {
                "description": "Handles user registration requests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Signup",
                "parameters": [
                    {
                        "description": "User Signup Data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserSignupData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Signup Result",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserSignupResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid Invite Token or Missing Invite Token or Domain Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/verify-email/send": {
            "post": {
                "description": "Sends a verification email to the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Send Verification Email",
                "parameters": [
                    {
                        "description": "Send Verification Email Data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SendVerificationEmailData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Send Verification Email Result",
                        "schema": {
                            "$ref": "#/definitions/handlers.SendVerificationEmailResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid Input or User does not exist",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/verify-email/verify": {
            "post": {
                "description": "Verifies the email using the provided token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify Email Token",
                "parameters": [
                    {
                        "description": "Verify Email Token Data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.VerifyEmailTokenData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verify Email Token Result",
                        "schema": {
                            "$ref": "#/definitions/handlers.VerifyEmailTokenResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid Input or Token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "admin_handlers.AdminLoginData": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "admin_handlers.AdminLoginResult": {
            "type": "object",
            "properties": {
                "emailSent": {
                    "description": "If true, the email is an existing admin email and a verification code has been sent.\nThe user can then proceed to verify the code.",
                    "type": "boolean"
                },
                "flowId": {
                    "description": "The flow ID for the login process. This is required for verifying the code.",
                    "type": "string"
                }
            }
        },
        "admin_handlers.VerifyAdminLoginData": {
            "type": "object",
            "required": [
                "code",
                "flowId"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "flowId": {
                    "type": "string"
                }
            }
        },
        "config.APIKeyConfig": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Description of the key",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the API Key",
                    "type": "string"
                }
            }
        },
        "config.AuditLogsConfig": {
            "type": "object",
            "properties": {
                "enable": {
                    "description": "Enable or disable audit logs.",
                    "type": "boolean"
                }
            }
        },
        "config.BrandingConfig": {
            "type": "object",
            "required": [
                "appName",
                "companyName",
                "companyNameShort",
                "supportURL"
            ],
            "properties": {
                "appName": {
                    "description": "AppName is the name of the application, used in various places like email templates, UI, etc.",
                    "type": "string"
                },
                "companyName": {
                    "description": "CompanyName is the name of the company, used in emails, UI, etc.",
                    "type": "string"
                },
                "companyNameShort": {
                    "description": "CompanyNameShort is a short version of the company name, used in places where space is limited.",
                    "type": "string"
                },
                "supportURL": {
                    "description": "SupportURL is the URL for support, used in emails, UI, etc.",
                    "type": "string"
                }
            }
        },
        "config.CompleteConfig": {
            "type": "object",
            "required": [
                "branding",
                "jwt",
                "multitenancy",
                "notifications",
                "public",
                "security"
            ],
            "properties": {
                "branding": {
                    "$ref": "#/definitions/config.BrandingConfig"
                },
                "debug": {
                    "description": "Debug mode for the application",
                    "type": "boolean"
                },
                "jwt": {
                    "$ref": "#/definitions/config.JWTConfig"
                },
                "multitenancy": {
                    "type": "boolean"
                },
                "notifications": {
                    "$ref": "#/definitions/config.NotificationsConfig"
                },
                "public": {
                    "$ref": "#/definitions/config.PublicConfig"
                },
                "security": {
                    "$ref": "#/definitions/config.SecurityConfig"
                }
            }
        },
        "config.EmailEndpointsConfig": {
            "type": "object",
            "required": [
                "passwordReset",
                "verificationEmail"
            ],
            "properties": {
                "passwordReset": {
                    "description": "PasswordReset is the endpoint for the password reset link.\nA `token` parameter will be passed to this URL.\nPass a full url, eg. https://auth.example.com/password-reset",
                    "type": "string"
                },
                "verificationEmail": {
                    "description": "VerificationEmail is the endpoint for the email verification link.\nA `token` parameter will be passed to this URL.\nPass a full url, eg. https://auth.example.com/verify-email",
                    "type": "string"
                }
            }
        },
        "config.EmailNotificationConfig": {
            "type": "object",
            "required": [
                "endpoints",
                "provider"
            ],
            "properties": {
                "endpoints": {
                    "description": "Endpoints holds the configuration for URLs inside emails.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.EmailEndpointsConfig"
                        }
                    ]
                },
                "provider": {
                    "description": "Provider is the email provider to use for sending emails.",
                    "type": "string",
                    "enum": [
                        "ses",
                        "sendgrid",
                        "smtp"
                    ]
                }
            }
        },
        "config.JWTConfig": {
            "type": "object",
            "required": [
                "refreshTokenExpiration",
                "sessionTokenExpiration"
            ],
            "properties": {
                "refreshTokenExpiration": {
                    "description": "Refresh token expiration time in seconds (default: 30d, 2592000)",
                    "type": "integer",
                    "minimum": 86400
                },
                "sessionTokenExpiration": {
                    "description": "Session token expiration time in seconds (default: 1hr, 3600)",
                    "type": "integer",
                    "minimum": 60
                }
            }
        },
        "config.NotificationsConfig": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Email configuration for sending notifications",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.EmailNotificationConfig"
                        }
                    ]
                },
                "sms": {
                    "description": "SMS Configuration for sending notifications",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.SMSNotificationConfig"
                        }
                    ]
                }
            }
        },
        "config.PublicConfig": {
            "type": "object",
            "required": [
                "domain",
                "scheme",
                "subDomain"
            ],
            "properties": {
                "debugBaseURL": {
                    "type": "string"
                },
                "domain": {
                    "description": "Domain is the domain at which Nexeres UI is being hosted.\n\nEg. if hosting Nexeres at auth.example.com, provide \"example.com\" here.\n\nThis setting is used as the Domain for all Cookies (except Refresh Token Cookie, that is only set at \"subdomain.domain\")",
                    "type": "string"
                },
                "scheme": {
                    "description": "Scheme for public URLs (http/https)\n\nUse \"https\" even if TLS termination is handled by reverse proxy",
                    "type": "string",
                    "enum": [
                        "http",
                        "https"
                    ]
                },
                "subDomain": {
                    "description": "Subdomain at which Nexeres UI is being hosted.\n\nEg. If hosting Nexeres at auth.example.com, provide \"auth\" here.",
                    "type": "string"
                }
            }
        },
        "config.RateLimitConfig": {
            "type": "object",
            "required": [
                "rate"
            ],
            "properties": {
                "rate": {
                    "description": "Rate limit for API requests.\nFormat: \"R-U\", where R is requests and U is the time unit (s - per second, m - per minute, h - per hour, d - per day)",
                    "type": "string"
                }
            }
        },
        "config.SMSNotificationConfig": {
            "type": "object",
            "required": [
                "provider"
            ],
            "properties": {
                "provider": {
                    "description": "TODO: Implement SMSNotificationConfig",
                    "type": "string",
                    "enum": [
                        "twilio"
                    ]
                }
            }
        },
        "config.SecurityConfig": {
            "type": "object",
            "required": [
                "apiKeys",
                "auditLogs",
                "rateLimit"
            ],
            "properties": {
                "apiKeys": {
                    "description": "The list of API Keys which are allowed to access the API endpoints.\nRequests without an API key, or with a key not specified here, will be denied with 401.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/config.APIKeyConfig"
                    }
                },
                "auditLogs": {
                    "description": "Enable or disable audit logs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.AuditLogsConfig"
                        }
                    ]
                },
                "rateLimit": {
                    "description": "Rate limiting configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.RateLimitConfig"
                        }
                    ]
                }
            }
        },
        "handlers.LogoutResult": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.RefreshTokenResult": {
            "type": "object",
            "properties": {
                "tokens": {
                    "$ref": "#/definitions/tokens.Tokens"
                }
            }
        },
        "handlers.SendVerificationEmailData": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "handlers.SendVerificationEmailResult": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.UserFlowData": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mfaRequired": {
                    "type": "boolean"
                },
                "mfaVerified": {
                    "type": "boolean"
                },
                "orgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.OrgCompat"
                    }
                },
                "returnTo": {
                    "description": "URL to redirect after flow completion",
                    "type": "string"
                },
                "ssoProvider": {
                    "description": "For SSO Flow, e.g., \"google\", \"github\", etc.",
                    "type": "string"
                },
                "ssoUserId": {
                    "description": "For SSO Flow, External User ID",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "handlers.UserLoginData": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "flowReturnTo": {
                    "description": "Optional field to store in the flow data which can be fetched by the client after login\nThis can be used to redirect the user to a specific page after login\nor to maintain the state of the application.\nIt is recommended to validate this field on the client side to prevent open redirect vulnerabilities.",
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.UserLoginResult": {
            "type": "object",
            "properties": {
                "flowId": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "requireEmailVerification": {
                    "type": "boolean"
                },
                "tokens": {
                    "$ref": "#/definitions/tokens.Tokens"
                }
            }
        },
        "handlers.UserSignupData": {
            "type": "object",
            "required": [
                "confirmPassword",
                "email",
                "firstName",
                "lastName",
                "password"
            ],
            "properties": {
                "confirmPassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "inviteToken": {
                    "description": "Optional invite token for signup",
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 8
                }
            }
        },
        "handlers.UserSignupResult": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "handlers.VerifyEmailTokenData": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "handlers.VerifyEmailTokenResult": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "debug": {
                    "description": "DebugMessage is a technical message that can be used for debugging.",
                    "type": "string"
                },
                "message": {
                    "description": "Message is a user-friendly message that can be displayed to the end user.",
                    "type": "string"
                }
            }
        },
        "models.OrgCompat": {
            "type": "object",
            "properties": {
                "avatarURL": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "slug": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "tokens.Tokens": {
            "type": "object",
            "properties": {
                "refreshToken": {
                    "description": "RefreshToken is the generated refresh token.\n\nThis is base64.RawURLEncoding encoded.\nDO NOT DECODE IT WHILE RETRIEVING IT FROM THE COOKIES/CLIENT.",
                    "type": "string"
                },
                "refreshTokenExpiry": {
                    "description": "RefreshTokenExpiry is the expiration time of the refresh token.",
                    "type": "string"
                },
                "sessionId": {
                    "description": "SessionId is the unique identifier for the session.",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "SessionToken is the generated session token.\n\nThis is a jwt which is base64.RawURLEncoding encoded.\nYOU NEED TO DECODE IT WHILE RETRIEVING IT FROM THE COOKIES/CLIENT.\nDO NOT USE IT AS IS. VALIDATION WILL FAIL WITHOUT DECODING.\nONLY WHEN DECODED, YOU SHOULD PASS IT TO THE THINGS THAT REQUIRE THE SESSION TOKEN.",
                    "type": "string"
                },
                "sessionTokenExpiry": {
                    "description": "SessionTokenExpiry is the expiration time of the session token.",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "APIKeyAuth": {
            "type": "apiKey",
            "name": "X-NEXERES-API-Key",
            "in": "header"
        },
        "AdminHeaderAuth": {
            "type": "apiKey",
            "name": "X-NEXERES-Admin-Token",
            "in": "header"
        },
        "RefreshHeaderAuth": {
            "type": "apiKey",
            "name": "X-NEXERES-Refresh-Token",
            "in": "header"
        },
        "SessionHeaderAuth": {
            "type": "apiKey",
            "name": "X-NEXERES-Session-Token",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "NBRGLM Nexeres Documentation",
        "url": "https://nbrglm.com/nexeres/docs"
    }
}