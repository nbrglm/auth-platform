// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"net/netip"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AuditLog struct {
	ID           uuid.UUID          `db:"id" json:"id"`
	OrgID        uuid.UUID          `db:"org_id" json:"orgId"`
	UserID       *uuid.UUID         `db:"user_id" json:"userId"`
	Action       string             `db:"action" json:"action"`
	ResourceType string             `db:"resource_type" json:"resourceType"`
	ResourceID   *uuid.UUID         `db:"resource_id" json:"resourceId"`
	IpAddress    *netip.Addr        `db:"ip_address" json:"ipAddress"`
	UserAgent    *string            `db:"user_agent" json:"userAgent"`
	Metadata     []byte             `db:"metadata" json:"metadata"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"createdAt"`
}

type Invitation struct {
	ID         uuid.UUID          `db:"id" json:"id"`
	OrgID      uuid.UUID          `db:"org_id" json:"orgId"`
	Email      string             `db:"email" json:"email"`
	Role       string             `db:"role" json:"role"`
	InvitedBy  *uuid.UUID         `db:"invited_by" json:"invitedBy"`
	Token      string             `db:"token" json:"token"`
	ExpiresAt  pgtype.Timestamptz `db:"expires_at" json:"expiresAt"`
	AcceptedAt pgtype.Timestamptz `db:"accepted_at" json:"acceptedAt"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	Status     string             `db:"status" json:"status"`
}

type MfaFactor struct {
	ID         uuid.UUID          `db:"id" json:"id"`
	UserID     uuid.UUID          `db:"user_id" json:"userId"`
	Type       string             `db:"type" json:"type"`
	Name       string             `db:"name" json:"name"`
	Secret     string             `db:"secret" json:"secret"`
	Verified   bool               `db:"verified" json:"verified"`
	LastUsedAt pgtype.Timestamptz `db:"last_used_at" json:"lastUsedAt"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

type OauthProvider struct {
	ID           uuid.UUID          `db:"id" json:"id"`
	OrgID        uuid.UUID          `db:"org_id" json:"orgId"`
	Provider     string             `db:"provider" json:"provider"`
	ClientID     string             `db:"client_id" json:"clientId"`
	ClientSecret string             `db:"client_secret" json:"clientSecret"`
	Scopes       []string           `db:"scopes" json:"scopes"`
	Enabled      bool               `db:"enabled" json:"enabled"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

type OidcAccessToken struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	TokenHash string             `db:"token_hash" json:"tokenHash"`
	ClientID  uuid.UUID          `db:"client_id" json:"clientId"`
	UserID    uuid.UUID          `db:"user_id" json:"userId"`
	OrgID     uuid.UUID          `db:"org_id" json:"orgId"`
	Scopes    []string           `db:"scopes" json:"scopes"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expiresAt"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"createdAt"`
}

type OidcAuthCode struct {
	ID                  uuid.UUID          `db:"id" json:"id"`
	Code                string             `db:"code" json:"code"`
	ClientID            uuid.UUID          `db:"client_id" json:"clientId"`
	UserID              uuid.UUID          `db:"user_id" json:"userId"`
	OrgID               uuid.UUID          `db:"org_id" json:"orgId"`
	RedirectUri         string             `db:"redirect_uri" json:"redirectUri"`
	Scopes              []string           `db:"scopes" json:"scopes"`
	Nonce               string             `db:"nonce" json:"nonce"`
	CodeChallenge       string             `db:"code_challenge" json:"codeChallenge"`
	CodeChallengeMethod string             `db:"code_challenge_method" json:"codeChallengeMethod"`
	ExpiresAt           pgtype.Timestamptz `db:"expires_at" json:"expiresAt"`
	CreatedAt           pgtype.Timestamptz `db:"created_at" json:"createdAt"`
}

type OidcClient struct {
	ID            uuid.UUID          `db:"id" json:"id"`
	OrgID         uuid.UUID          `db:"org_id" json:"orgId"`
	ClientID      string             `db:"client_id" json:"clientId"`
	ClientSecret  *string            `db:"client_secret" json:"clientSecret"`
	Name          string             `db:"name" json:"name"`
	RedirectUris  []string           `db:"redirect_uris" json:"redirectUris"`
	Scopes        []string           `db:"scopes" json:"scopes"`
	GrantTypes    []string           `db:"grant_types" json:"grantTypes"`
	ResponseTypes []string           `db:"response_types" json:"responseTypes"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

type OidcRefreshToken struct {
	ID            uuid.UUID          `db:"id" json:"id"`
	TokenHash     string             `db:"token_hash" json:"tokenHash"`
	AccessTokenID uuid.UUID          `db:"access_token_id" json:"accessTokenId"`
	ExpiresAt     pgtype.Timestamptz `db:"expires_at" json:"expiresAt"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"createdAt"`
}

type Org struct {
	ID          uuid.UUID          `db:"id" json:"id"`
	Slug        string             `db:"slug" json:"slug"`
	Name        string             `db:"name" json:"name"`
	Description *string            `db:"description" json:"description"`
	AvatarUrl   *string            `db:"avatar_url" json:"avatarUrl"`
	Settings    []byte             `db:"settings" json:"settings"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
	DeletedAt   pgtype.Timestamptz `db:"deleted_at" json:"deletedAt"`
}

type OrgDomain struct {
	OrgID           uuid.UUID          `db:"org_id" json:"orgId"`
	Domain          string             `db:"domain" json:"domain"`
	Verified        bool               `db:"verified" json:"verified"`
	AutoJoinEnabled bool               `db:"auto_join_enabled" json:"autoJoinEnabled"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

type Scope struct {
	ID          uuid.UUID          `db:"id" json:"id"`
	Name        string             `db:"name" json:"name"`
	Service     string             `db:"service" json:"service"`
	Description *string            `db:"description" json:"description"`
	IsDefault   bool               `db:"is_default" json:"isDefault"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

type Session struct {
	ID               uuid.UUID          `db:"id" json:"id"`
	UserID           uuid.UUID          `db:"user_id" json:"userId"`
	OrgID            uuid.UUID          `db:"org_id" json:"orgId"`
	TokenHash        string             `db:"token_hash" json:"tokenHash"`
	RefreshTokenHash string             `db:"refresh_token_hash" json:"refreshTokenHash"`
	MfaVerified      bool               `db:"mfa_verified" json:"mfaVerified"`
	IpAddress        netip.Addr         `db:"ip_address" json:"ipAddress"`
	UserAgent        string             `db:"user_agent" json:"userAgent"`
	MfaVerifiedAt    pgtype.Timestamptz `db:"mfa_verified_at" json:"mfaVerifiedAt"`
	ExpiresAt        pgtype.Timestamptz `db:"expires_at" json:"expiresAt"`
	CreatedAt        pgtype.Timestamptz `db:"created_at" json:"createdAt"`
}

type User struct {
	ID            uuid.UUID          `db:"id" json:"id"`
	Email         string             `db:"email" json:"email"`
	EmailVerified bool               `db:"email_verified" json:"emailVerified"`
	PasswordHash  *string            `db:"password_hash" json:"passwordHash"`
	BackupCodes   []string           `db:"backup_codes" json:"backupCodes"`
	FirstName     *string            `db:"first_name" json:"firstName"`
	LastName      *string            `db:"last_name" json:"lastName"`
	AvatarUrl     *string            `db:"avatar_url" json:"avatarUrl"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
	DeletedAt     pgtype.Timestamptz `db:"deleted_at" json:"deletedAt"`
}

type UserOauthIdentity struct {
	ID                uuid.UUID          `db:"id" json:"id"`
	UserID            uuid.UUID          `db:"user_id" json:"userId"`
	Provider          string             `db:"provider" json:"provider"`
	ProviderUserID    string             `db:"provider_user_id" json:"providerUserId"`
	ProviderUserEmail string             `db:"provider_user_email" json:"providerUserEmail"`
	ProviderData      []byte             `db:"provider_data" json:"providerData"`
	CreatedAt         pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	UpdatedAt         pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

type UserOrg struct {
	UserID       uuid.UUID          `db:"user_id" json:"userId"`
	OrgID        uuid.UUID          `db:"org_id" json:"orgId"`
	Role         string             `db:"role" json:"role"`
	JoinedAt     pgtype.Timestamptz `db:"joined_at" json:"joinedAt"`
	LastActiveAt pgtype.Timestamptz `db:"last_active_at" json:"lastActiveAt"`
	Status       string             `db:"status" json:"status"`
}

type VerificationToken struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	UserID    uuid.UUID          `db:"user_id" json:"userId"`
	Type      string             `db:"type" json:"type"`
	TokenHash []byte             `db:"token_hash" json:"tokenHash"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expiresAt"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"createdAt"`
}
